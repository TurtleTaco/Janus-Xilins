// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="astroSim,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu19eg-ffve1924-3-e-es2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.418000,HLS_SYN_LAT=534177,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=650,HLS_SYN_FF=100466,HLS_SYN_LUT=111714}" *)

module astroSim (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        result_address0,
        result_ce0,
        result_we0,
        result_d0,
        result_address1,
        result_ce1,
        result_we1,
        result_d1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] result_address0;
output   result_ce0;
output   result_we0;
output  [63:0] result_d0;
output  [5:0] result_address1;
output   result_ce1;
output   result_we1;
output  [63:0] result_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_janus_run_fu_120_ap_start;
wire    grp_janus_run_fu_120_ap_done;
wire    grp_janus_run_fu_120_ap_idle;
wire    grp_janus_run_fu_120_ap_ready;
wire   [5:0] grp_janus_run_fu_120_p_int_out_address0;
wire    grp_janus_run_fu_120_p_int_out_ce0;
wire    grp_janus_run_fu_120_p_int_out_we0;
wire   [63:0] grp_janus_run_fu_120_p_int_out_d0;
wire   [5:0] grp_janus_run_fu_120_p_int_out_address1;
wire    grp_janus_run_fu_120_p_int_out_ce1;
wire    grp_janus_run_fu_120_p_int_out_we1;
wire   [63:0] grp_janus_run_fu_120_p_int_out_d1;
reg    ap_reg_grp_janus_run_fu_120_ap_start;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_reg_grp_janus_run_fu_120_ap_start = 1'b0;
end

janus_run grp_janus_run_fu_120(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_janus_run_fu_120_ap_start),
    .ap_done(grp_janus_run_fu_120_ap_done),
    .ap_idle(grp_janus_run_fu_120_ap_idle),
    .ap_ready(grp_janus_run_fu_120_ap_ready),
    .p_int_out_address0(grp_janus_run_fu_120_p_int_out_address0),
    .p_int_out_ce0(grp_janus_run_fu_120_p_int_out_ce0),
    .p_int_out_we0(grp_janus_run_fu_120_p_int_out_we0),
    .p_int_out_d0(grp_janus_run_fu_120_p_int_out_d0),
    .p_int_out_address1(grp_janus_run_fu_120_p_int_out_address1),
    .p_int_out_ce1(grp_janus_run_fu_120_p_int_out_ce1),
    .p_int_out_we1(grp_janus_run_fu_120_p_int_out_we1),
    .p_int_out_d1(grp_janus_run_fu_120_p_int_out_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_janus_run_fu_120_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_reg_grp_janus_run_fu_120_ap_start <= 1'b1;
        end else if ((1'b1 == grp_janus_run_fu_120_ap_ready)) begin
            ap_reg_grp_janus_run_fu_120_ap_start <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_janus_run_fu_120_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_janus_run_fu_120_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_janus_run_fu_120_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign grp_janus_run_fu_120_ap_start = ap_reg_grp_janus_run_fu_120_ap_start;

assign result_address0 = grp_janus_run_fu_120_p_int_out_address0;

assign result_address1 = grp_janus_run_fu_120_p_int_out_address1;

assign result_ce0 = grp_janus_run_fu_120_p_int_out_ce0;

assign result_ce1 = grp_janus_run_fu_120_p_int_out_ce1;

assign result_d0 = grp_janus_run_fu_120_p_int_out_d0;

assign result_d1 = grp_janus_run_fu_120_p_int_out_d1;

assign result_we0 = grp_janus_run_fu_120_p_int_out_we0;

assign result_we1 = grp_janus_run_fu_120_p_int_out_we1;

endmodule //astroSim
